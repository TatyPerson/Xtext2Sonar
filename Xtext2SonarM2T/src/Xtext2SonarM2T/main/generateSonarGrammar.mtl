[comment encoding = UTF-8 /]
[** Copyright (C) 2016  Tatiana Person Montero

This program is free software: you can redistribute it and/or modify
it under the terms of the Eclipse Public License as published by
the Eclipse Software Foundation, either version 1 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
Eclipse Public License for more details.

You should have received a copy of the Eclipse Public License
along with this program.  If not, see <https://www.eclipse.org/legal/epl-v10.html>*/]

[module generateSonarGrammar('http://www.eclipse.org/2008/Xtext')]
[import Xtext2SonarM2T::main::utilTemplateRename /]
[import Xtext2SonarM2T::main::utilTemplateCompare /]

[**
 * The documentation of the template SonarGrammarImpl.
 * @param aGrammar
 */]
[template public SonarGrammarImpl(aGrammar : Grammar)]
[comment @main /]
[if (not aGrammar.name.contains('Terminals'))]
[let grammarName: String = aGrammar.name.replaceAll('[a-zA-Z0-9]+\\.', '')]
[file (grammarName.concat('Impl.java'), false, 'UTF-8')]
package org.sonar.[grammarName/].api;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import com.sonar.sslr.api.Grammar;
import org.sonar.sslr.grammar.GrammarRuleKey;
import org.sonar.[grammarName/].[grammarName/]Configuration;
import org.sonar.sslr.grammar.LexerfulGrammarBuilder;
import static com.sonar.sslr.api.GenericTokenType.IDENTIFIER;
import static org.sonar.[grammarName/].api.[grammarName/]TokenType.NUMBER;
import static org.sonar.[grammarName/].api.[grammarName/]TokenType.STRING;
import static org.sonar.[grammarName/].api.[grammarName/]TokenType.CHARACTER;
[for(rule : TerminalRule | aGrammar.eAllContents(xtext::TerminalRule))]
import static org.sonar.[grammarName/].api.[grammarName/]TokenType.[rule.name/];
[/for]

public enum [grammarName.concat('Impl').toUpperFirst()/] implements GrammarRuleKey {
	
	[for (nameRule : String | aGrammar.eAllContents(xtext::ParserRule).name)]
	[if(not(i = aGrammar.eAllContents(xtext::ParserRule)->size()))]
	[nameRule.toUpper()/],
	[else]
	[nameRule.toUpper()/];
	[/if]
	[/for]

	public static final Logger LOG = LoggerFactory.getLogger("[grammarName.concat('Impl').toUpperFirst()/]");

	public static Grammar create([grammarName.concat('Configuration')/] conf) {
		 LexerfulGrammarBuilder b = LexerfulGrammarBuilder.create();

		 toplevel(b, conf);
		 generate(b);
		[comment --- The first rule is the main rule of the Xtext grammar./]
		 b.setRootRule([aGrammar.rules->at(1).name.toUpper()/]);

		 return b.buildWithMemoizationOfMatchesForAllRules();
	}

	private static void toplevel(LexerfulGrammarBuilder b, [grammarName.concat('Configuration')/] conf) {
		[comment --- In the top level we define the main rule./]
		b.rule([aGrammar.rules->at(1).name.toUpper()/]).is([if(aGrammar.rules->at(1).eAllContents(xtext::Alternatives)->size() <> 0)]
		[comment --- If there are alternatives is a selection rule./]
		[for(alternative : Alternatives | aGrammar.rules->at(1).eAllContents(xtext::Alternatives))]
			[for(rule : RuleCall | alternative.eAllContents(xtext::RuleCall))]
				[if(i = 1)]
		[comment --- types of rule: Rule(Option1 | Option2)/]

		b.firstOf([rule.rule.name.toUpper()/],
				[elseif(i = alternative.eAllContents(xtext::RuleCall)->size())]
		[rule.rule.name.toUpper()/])).skipIfOneChild();
				[else]
		[rule.rule.name.toUpper()/],			
				[/if]
			[/for]
		[/for]
		[comment --- If there aren't alternatives is a group rule./]
		[/if]
	}

	private static void generate(LexerfulGrammarBuilder b) {
		[comment --- First, the Terminal rules./]
		[for(terminal: TerminalRule | aGrammar.eAllContents(xtext::TerminalRule))]
		b.rule([terminal.name/]).is([if(terminal.type.classifier.name.equalsIgnoreCase('EString'))]b.isOneOfThem(STRING, STRING)[else]b.isOneOfThem(NUMBER, NUMBER)[/if]);
		[/for]
		[comment --- We select the ParserRules because are the rules that define the rule grammar in Xtext./]
		[for(rule : ParserRule | aGrammar.eAllContents(xtext::ParserRule))]
			[comment --- We delete the first because is the top rule./]
			[if(i <> 1)._and(rule.eAllContents(xtext::RuleCall)->size() = 1)._and(rule.name <> 'EString')._and(rule.name <> 'EInt')._and(rule.name <> 'EFloat')]
				[if(rule.eAllContents(xtext::RuleCall)->at(1).rule.name.equalsIgnoreCase('EString'))]
		b.rule([rule.name.toUpper()/]).is(b.isOneOfThem(STRING, STRING));
				[elseif(rule.eAllContents(xtext::RuleCall)->at(1).rule.name.equalsIgnoreCase('EInt')._or(rule.eAllContents(xtext::RuleCall)->at(1).rule.name.equalsIgnoreCase('EFloat')))]
		b.rule([rule.name.toUpper()/]).is(b.isOneOfThem(NUMBER, NUMBER));
				[else]
					[if(rule.eAllContents(xtext::RuleCall)->at(1).rule.oclIsKindOf(xtext::TerminalRule))]
		b.rule([rule.name.toUpper()/]).is(b.isOneOfThem([rule.eAllContents(xtext::RuleCall)->at(1).rule.name.toUpper()/], [rule.eAllContents(xtext::RuleCall)->at(1).rule.name.toUpper()/]));
					[else]
		b.rule([rule.name.toUpper()/]).is([rule.eAllContents(xtext::RuleCall)->at(1).rule.name.toUpper()/]);
					[/if]
				[/if]
			[elseif(i <> 1)._and(rule.name <> 'EString')._and(rule.name <> 'EInt')._and(rule.name <> 'EFloat')]
				[let size: Integer = rule.eAllContents(xtext::AbstractElement)->size()]
		b.rule([rule.name.toUpper()/]).is(
		[comment --- If there are only alternatives is a selection rule./]
					[if(not((rule.eAllContents(xtext::AbstractElement)->first().oclIsKindOf(xtext::Alternatives))._and(rule.eAllContents(xtext::AbstractElement)->last().ancestors(xtext::Alternatives)->size() <> 0)))._and(rule.eAllContents(xtext::AbstractElement)->size() > 1)]
		b.sequence([/if]
					[comment --- In this case, we caught all elements and processing them./]
					[for(element : AbstractElement | rule.eAllContents(xtext::AbstractElement))]		
						[comment --- Start ALTERNATIVES./]
						[if(element.oclIsKindOf(xtext::Alternatives))]
							[for(elementAux : AbstractElement | element.eAllContents(xtext::AbstractElement))]
									[comment --- The alternatives are RuleCall./]
									[if(i = 1)]
		b.firstOf([/if]
									[if(elementAux.oclIsKindOf(xtext::RuleCall))] 
										[if((i = element.eAllContents(xtext::AbstractElement)->size())._and(rule.eAllContents(xtext::AbstractElement)->last() = elementAux))]
										[comment --- types of rule: Rule(Option1 | Option2)/]
											[if(elementAux.oclAsType(xtext::RuleCall).rule.name.equalsIgnoreCase('EString'))]
		b.isOneOfThem(STRING, STRING)
											[elseif(elementAux.oclAsType(xtext::RuleCall).rule.name.equalsIgnoreCase('EInt')._or(elementAux.oclAsType(xtext::RuleCall).rule.name.equalsIgnoreCase('EFloat')))]
		b.isOneOfThem(NUMBER, NUMBER)
											[else]
		[elementAux.oclAsType(xtext::RuleCall).rule.name.toUpper()/]
											[/if]
										[else]
											[if(elementAux.oclAsType(xtext::RuleCall).rule.name.equalsIgnoreCase('EString'))]
		b.isOneOfThem(STRING, STRING)[if(i = 1)],[elseif(i = element.eAllContents(xtext::AbstractElement)->size())]),[else],[/if]
											[elseif(elementAux.oclAsType(xtext::RuleCall).rule.name.equalsIgnoreCase('EInt')._or(elementAux.oclAsType(xtext::RuleCall).rule.name.equalsIgnoreCase('EFloat')))]
		b.isOneOfThem(NUMBER, NUMBER)[if(i = 1)],[elseif(i = element.eAllContents(xtext::AbstractElement)->size())]),[else],[/if]
											[else]
		[elementAux.oclAsType(xtext::RuleCall).rule.name.toUpper()/][if(i = 1)],[elseif(i = element.eAllContents(xtext::AbstractElement)->size())]),[else],[/if]
											[/if]			
										[/if]
									[comment --- The alternatives are Keywords./]
								 	[elseif(elementAux.oclIsKindOf(xtext::Keyword))]
										[if((i = element.eAllContents(xtext::AbstractElement)->size())._and(rule.eAllContents(xtext::AbstractElement)->last() = elementAux))]
											[if(elementAux.oclAsType(xtext::Keyword).value.compareKeywordTemplate().contains('true')._and(elementAux.oclAsType(xtext::Keyword).value.noValidCharactersTemplate().contains('false')))]
		b.isOneOfThem([grammarName.concat('Punctuator').toUpperFirst()/].[elementAux.oclAsType(xtext::Keyword).value.renameKeywordSimpleTemplate()/], [grammarName.concat('Punctuator').toUpperFirst()/].[elementAux.oclAsType(xtext::Keyword).value.renameKeywordSimpleTemplate()/])
											[elseif(elementAux.oclAsType(xtext::Keyword).value.compareKeywordTemplate().contains('false')._and(elementAux.oclAsType(xtext::Keyword).value.noValidCharactersTemplate().contains('false')))]
		b.isOneOfThem([grammarName.concat('Keyword').toUpperFirst()/].[elementAux.oclAsType(xtext::Keyword).value.renameKeywordWithSpecialCharacterTemplate().toUpper()/], [grammarName.concat('Keyword').toUpperFirst()/].[elementAux.oclAsType(xtext::Keyword).value.renameKeywordWithSpecialCharacterTemplate().toUpper()/])
											[/if]
										[else]
											[if(elementAux.oclAsType(xtext::Keyword).value.compareKeywordTemplate().contains('true')._and(elementAux.oclAsType(xtext::Keyword).value.noValidCharactersTemplate().contains('false')))]
		b.isOneOfThem([grammarName.concat('Punctuator').toUpperFirst()/].[elementAux.oclAsType(xtext::Keyword).value.renameKeywordSimpleTemplate()/], [grammarName.concat('Punctuator').toUpperFirst()/].[elementAux.oclAsType(xtext::Keyword).value.renameKeywordSimpleTemplate()/])[if(i = 1)],[elseif(i = element.eAllContents(xtext::AbstractElement)->size())]),[else],[/if]
											[elseif(elementAux.oclAsType(xtext::Keyword).value.compareKeywordTemplate().contains('false')._and(elementAux.oclAsType(xtext::Keyword).value.noValidCharactersTemplate().contains('false')))]
		b.isOneOfThem([grammarName.concat('Keyword').toUpperFirst()/].[elementAux.oclAsType(xtext::Keyword).value.renameKeywordWithSpecialCharacterTemplate().toUpper()/], [grammarName.concat('Keyword').toUpperFirst()/].[elementAux.oclAsType(xtext::Keyword).value.renameKeywordWithSpecialCharacterTemplate().toUpper()/])[if(i = 1)],[elseif(i = element.eAllContents(xtext::AbstractElement)->size())]),[else],[/if]
											[/if]
										[/if]
									[/if]
									[if(rule.eAllContents(xtext::AbstractElement)->last() = elementAux)]
		)).skipIfOneChild();
									[/if]
							[/for]
						[comment --- End ALTERNATIVES./]
						[comment --- Start KEYWORDS./]
						[elseif((element.oclIsKindOf(xtext::Keyword))._and(element.ancestors(xtext::Alternatives)->size() = 0))]
							[comment --- If his parent is optional, he too/]
							[if(element.oclAsType(xtext::Keyword).ancestors(xtext::Group)->at(1).cardinality = '?')]
		b.optional(
							[/if]
							[comment --- Rename the special characters./]
							[if(element.oclAsType(xtext::Keyword).value.compareKeywordTemplate().contains('true')._and(element.oclAsType(xtext::Keyword).value.noValidCharactersTemplate().contains('false')))]
		b.isOneOfThem([grammarName.concat('Punctuator').toUpperFirst()/].[element.oclAsType(xtext::Keyword).value.renameKeywordSimpleTemplate()/], [grammarName.concat('Punctuator').toUpperFirst()/].[element.oclAsType(xtext::Keyword).value.renameKeywordSimpleTemplate()/])[if(i <> size)][if(element.oclAsType(xtext::Keyword).ancestors(xtext::Group)->at(1).cardinality = '?')])[/if],[/if]
							[elseif(element.oclAsType(xtext::Keyword).value.compareKeywordTemplate().contains('false')._and(element.oclAsType(xtext::Keyword).value.noValidCharactersTemplate().contains('false')))]
		b.isOneOfThem([grammarName.concat('Keyword').toUpperFirst()/].[element.oclAsType(xtext::Keyword).value.renameKeywordWithSpecialCharacterTemplate().toUpper()/], [grammarName.concat('Keyword').toUpperFirst()/].[element.oclAsType(xtext::Keyword).value.renameKeywordWithSpecialCharacterTemplate().toUpper()/])[if(i <> size)][if(element.oclAsType(xtext::Keyword).ancestors(xtext::Group)->at(1).cardinality = '?')])[/if],[/if]
							[/if]
						[comment --- End KEYWORDS./]
						[comment --- Start RULECALLS./]
						[elseif(element.oclIsKindOf(xtext::RuleCall)._and(element.ancestors(xtext::Alternatives)->size() = 0))]
							[comment --- If have a Crossreference is a Identifier./]
							[if(element.oclAsType(xtext::RuleCall).ancestors(xtext::Assignment)->at(1).eContents(xtext::CrossReference)->size() > 0)]
								[if(element.oclAsType(xtext::RuleCall).ancestors(xtext::Assignment)->at(1).operator = '+=')]
		[comment --- Are identifier of other classes of the metamodel./]
		b.zeroOrMore(IDENTIFIER)[if(i <> size)],[/if]
								[/if]
							[comment --- If is a EString then is a Identifier too./]
						[elseif((element.oclAsType(xtext::RuleCall).rule.type.classifier.name = 'EString')._and(element.ancestors(xtext::Alternatives)->size() = 0))]
								[if(element.oclAsType(xtext::RuleCall).ancestors(xtext::Assignment)->at(1).operator = '+=')]
		[comment --- Are identifier of other classes of the metamodel./]
		b.zeroOrMore(IDENTIFIER)[if(i <> size)],[/if]
								[else]
		IDENTIFIER[if(i <> size)],[/if]
								[/if]
							[comment --- If is a EInt then is a 'NUMERO' of the lexer./]
						[elseif((element.oclAsType(xtext::RuleCall).rule.type.classifier.name.equalsIgnoreCase('EInt'))._or(element.oclAsType(xtext::RuleCall).rule.type.classifier.name.equalsIgnoreCase('EFloat'))._and(element.ancestors(xtext::Alternatives)->size() = 0))]
								[if(element.oclAsType(xtext::RuleCall).ancestors(xtext::Assignment)->at(1).operator = '+=')]
		b.zeroOrMore(b.isOneOfThem(NUMBER, NUMBER))[if(i <> size)],[/if]
								[else]
		b.isOneOfThem(NUMBER, NUMBER)[if(i <> size)],[/if]
								[/if]
							[comment --- In this case, is a normal atribute of another class type./]
						[elseif(element.ancestors(xtext::Alternatives)->size() = 0)]
								[if(element.oclAsType(xtext::RuleCall).ancestors(xtext::Assignment)->at(1).operator = '+=')]
		b.zeroOrMore([element.oclAsType(xtext::RuleCall).rule.name.toUpper()/])[if(i <> size)],[/if]
								[else]
		[element.oclAsType(xtext::RuleCall).rule.name.toUpper()/][if(i <> size)],[/if]
								[/if]
							[/if]
						[comment --- End RULECALLS./]
						[/if]
					[/for]
		[if((rule.eAllContents(xtext::AbstractElement)->size() > 1)._and(rule.eAllContents(xtext::AbstractElement)->last().ancestors(xtext::Alternatives)->size() = 0))]));[elseif(rule.eAllContents(xtext::AbstractElement)->size() = 1)]);[/if]
					[/let]
				[/if]
		[lineSeparator()/]
		[/for]
	}

}
[/file]

[file (grammarName.concat('Keyword.java'), false, 'UTF-8')]
package org.sonar.[grammarName/].api;

import com.sonar.sslr.api.AstNode;
import com.sonar.sslr.api.TokenType;
import org.sonar.sslr.grammar.GrammarRuleKey;

public enum [grammarName.concat('Keyword')/] implements TokenType, GrammarRuleKey {
		
	[for(keyword: String | aGrammar.eAllContents(xtext::Keyword).value->asSet())]
		[if((keyword.compareKeywordTemplate().contains('false')._and(keyword.noValidCharactersTemplate().contains('false'))))]
			[if(not(i = aGrammar.eAllContents(xtext::Keyword).value->asSet()->size()))]
	[keyword.renameKeywordWithSpecialCharacterTemplate().toUpper()/]("[keyword/]"),
			[else]
	[keyword.renameKeywordWithSpecialCharacterTemplate().toUpper()/]("[keyword/]");
			[/if]
		[/if]		
	[/for]
;

  private final String value;

  private [grammarName.concat('Keyword')/](String value) {
    this.value = value;
  }

  public String getName() {
    return name();
  }

  public String getValue() {
    return value;
  }

  public boolean hasToBeSkippedFromAst(AstNode node) {
    return false;
  }

  public static String['[]'/] keywordValues() {
    [grammarName.concat('Keyword')/]['[]'/] keywordsEnum = [grammarName.concat('Keyword')/].values();
    String['[]'/] keywords = new String['[keywordsEnum.length]'/];
    for (int i = 0; i < keywords.length; i++) {
      keywords['[i]'/] = keywordsEnum['[i]'/].getValue();
    }
    return keywords;
  }

}
[/file]

[file(grammarName.concat('.java'), false, 'UTF-8')]
package org.sonar.[grammarName/].api;

import com.sonar.sslr.api.Grammar;
import com.sonar.sslr.api.Rule;

public class [grammarName/] extends Grammar {
	[for (nameRule : String | aGrammar.eAllContents(xtext::ParserRule).name)]
	public Rule [nameRule.toUpper()/];
	[/for]

	@Override
	public Rule getRootRule() {
		// TODO Auto-generated method stub
		return [aGrammar.rules->at(1).name.toUpper()/];
	}
}
[/file]

[file (grammarName.concat('Punctuator.java'), false, 'UTF-8')]
package org.sonar.[grammarName/].api;

import com.sonar.sslr.api.AstNode;
import com.sonar.sslr.api.TokenType;
import org.sonar.sslr.grammar.GrammarRuleKey;

public enum [grammarName.concat('Punctuator')/] implements TokenType, GrammarRuleKey {

	[for(keyword: String | aGrammar.eAllContents(xtext::Keyword).value->asSet())]
		[if((keyword.compareKeywordTemplate().contains('true')._and(keyword.noValidCharactersTemplate().contains('false'))))]
			[if(not(i = aGrammar.eAllContents(xtext::Keyword).value->asSet()->size()))]
	[keyword.renameKeywordTemplate()/],
			[else]
	[keyword.renameKeywordTemplate()/];
			[/if]
		[/if]		
	[/for]
;

  private final String value;

  private [grammarName.concat('Punctuator')/](String word) {
    this.value = word;
  }

  public String getName() {
    return name();
  }

  public String getValue() {
    return value;
  }

  public boolean hasToBeSkippedFromAst(AstNode node) {
    return false;
  }
}
[/file]

[file (grammarName.concat('TokenType.java'), false, 'UTF-8')]
package org.sonar.[grammarName/].api;

import com.sonar.sslr.api.AstNode;
import com.sonar.sslr.api.TokenType;
import org.sonar.sslr.grammar.GrammarRuleKey;

public enum [grammarName/]TokenType implements TokenType, GrammarRuleKey {
  [for(rule : TerminalRule | aGrammar.eAllContents(xtext::TerminalRule))]
  [rule.name.toUpper()/],
  [/for]
  CHARACTER,
  NUMBER,
  STRING;	

  // TODO in fact it's STRING_LITERAL, but we need to keep compatibility of XPath expressions

  public String getName() {
    return name();
  }

  public String getValue() {
    return name();
  }

  public boolean hasToBeSkippedFromAst(AstNode node) {
    return false;
  }
}
[/file]
[file(grammarName.concat('AstScanner.java'), false, 'UTF-8')]
package org.sonar.[grammarName/].api;

import com.sonar.sslr.api.Grammar;
import com.sonar.sslr.impl.Parser;

import org.sonar.[grammarName/].visitors.[grammarName/]CharsetAwareVisitor;
import org.sonar.[grammarName/].visitors.[grammarName/]FileVisitor;
import org.sonar.[grammarName/].[grammarName/]CommentAnalyser;
import org.sonar.[grammarName/].[grammarName/]Configuration;
import org.sonar.[grammarName/].parser.[grammarName/]Parser;
import org.sonar.squidbridge.AstScanner;
import org.sonar.squidbridge.SquidAstVisitor;
import org.sonar.squidbridge.SquidAstVisitorContextImpl;
import org.sonar.squidbridge.api.SourceCode;
import org.sonar.squidbridge.api.SourceFile;
import org.sonar.squidbridge.api.SourceProject;
import org.sonar.squidbridge.indexer.QueryByType;
import org.sonar.squidbridge.metrics.CommentsVisitor;
import org.sonar.squidbridge.metrics.CounterVisitor;
import org.sonar.squidbridge.metrics.LinesOfCodeVisitor;
import org.sonar.squidbridge.metrics.LinesVisitor;

import java.io.File;
import java.util.Collection;

public final class [grammarName/]AstScanner {

  private [grammarName/]AstScanner() {}

  /**
   * Helper method for testing checks without having to deploy them on a Sonar instance.
   */
  public static SourceFile scanSingleFileConfig(File file, [grammarName/]Configuration [grammarName/]Config, SquidAstVisitor<Grammar>... visitors) {
	    if (!file.isFile()) {
	      throw new IllegalArgumentException("File '" + file + "' not found.");
	    }
	    AstScanner<Grammar> scanner = create([grammarName/]Config, visitors);
	    scanner.scanFile(file);
	    Collection<SourceCode> sources = scanner.getIndex().search(new QueryByType(SourceFile.class));
	    if (sources.size() != 1) {
	      throw new IllegalStateException("Only one SourceFile was expected whereas " + sources.size() + " has been returned.");
	    }
	    return (SourceFile) sources.iterator().next();
  }

  public static AstScanner<Grammar> create([grammarName/]Configuration conf, SquidAstVisitor<Grammar>... visitors) {
	final SquidAstVisitorContextImpl<Grammar> context = new SquidAstVisitorContextImpl<Grammar>(new SourceProject("[grammarName/] Project"));;
    final Parser<Grammar> parser = [grammarName/]Parser.create(/*context, conf*/);

    AstScanner.Builder<Grammar> builder = AstScanner.<Grammar> builder(context).setBaseParser(parser);

    /* Metrics */
    builder.withMetrics([grammarName/]Metric.values());

    /* Comments */
    builder.setCommentAnalyser(new [grammarName/]CommentAnalyser());

    /* Files */
    builder.setFilesMetric([grammarName/]Metric.FILES);

    /* Functions */
    builder.withSquidAstVisitor(CounterVisitor.<Grammar> builder()
            .setMetricDef([grammarName/]Metric.FUNCTIONS)
            /*.subscribeTo(TO COMPLETE WITH THE FUNCTION RULES BY THE FINAL USER) */
            .build());

    /* Metrics */
    builder.withSquidAstVisitor(new LinesVisitor<Grammar>([grammarName/]Metric.LINES));
    builder.withSquidAstVisitor(new LinesOfCodeVisitor<Grammar>([grammarName/]Metric.LINES_OF_CODE));
    builder.withSquidAstVisitor(CommentsVisitor.<Grammar>builder().withCommentMetric(
    	      [grammarName/]Metric.COMMENT_LINES)
    	      .withNoSonar(true)
    	      /*.withIgnoreHeaderComment(conf.getIgnoreHeaderComments())*/.build());
    builder.withSquidAstVisitor(CounterVisitor.<Grammar> builder()
        .setMetricDef([grammarName/]Metric.STATEMENTS)
        /*.subscribeTo(TO COMPLETE WITH THE STATEMENT RULES BY THE FINAL USER) */
        .build());
    
    builder.withSquidAstVisitor(new [grammarName/]FileVisitor<Grammar>(context));
    //builder.withSquidAstVisitor(new [grammarName/]ComplexityVisitor<Grammar>(context));

    for (SquidAstVisitor<Grammar> visitor : visitors) {
        if (visitor instanceof [grammarName/]CharsetAwareVisitor) {
            (([grammarName/]CharsetAwareVisitor) visitor).setCharset(conf.getCharset());
          }
        builder.withSquidAstVisitor(visitor);
    }
    return builder.build();
  }
}
[/file]
[/let]
[/if]
[/template]